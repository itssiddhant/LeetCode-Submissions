{"id":1222088610,"question_id":226,"lang":"c","lang_name":"C","time":"3 months, 3 weeks","timestamp":1712147124,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1222088610/","is_pending":"Not Pending","title":"Invert Binary Tree","memory":"5.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\nvoid invert(struct TreeNode*root){\n    if (root == NULL) return;\n    else {\n        struct TreeNode *temp = root->left;\n        root->left = root->right;\n        root->right = temp;\n        invert(root->left);\n        invert(root->right);\n    }\n            \n}\n\nvoid inordertraversal(struct TreeNode* root){\n    if (root==NULL) return;\n    else{\n        inordertraversal(root->left);\n        printf(\"%d \",root->val);\n        inordertraversal(root->right);\n    }\n}\nstruct TreeNode* invertTree(struct TreeNode* root) {\n    invert(root);\n    inordertraversal(root);\n    \n    return root;\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"invert-binary-tree","has_notes":false,"flag_type":1}