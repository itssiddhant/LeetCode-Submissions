{"id":1333223306,"question_id":1285,"lang":"cpp","lang_name":"C++","time":"3 days, 11 hours","timestamp":1721925385,"status":10,"status_display":"Accepted","runtime":"102 ms","url":"/submissions/detail/1333223306/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"64.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode* root, vector<int> &ans){\n        if(root==NULL) return;\n\n        inorder(root->left,ans);\n        ans.push_back(root->val);\n        inorder(root->right,ans);\n    }\n\n    TreeNode* toBST(int s, int e, vector<int> &ans){\n        if(s>e)return NULL;\n\n        int mid = s +(e-s)/2;\n\n        TreeNode* root = new TreeNode(ans[mid]);\n\n        root->left = toBST(s,mid-1,ans);\n        root->right = toBST(mid+1,e,ans);\n        return root;\n    }\n\n    TreeNode* balanceBST(TreeNode* root) {\n        vector<int> ans;\n        inorder(root,ans);\n\n        return toBST(0, ans.size()-1,ans);\n    }\n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false,"flag_type":1}