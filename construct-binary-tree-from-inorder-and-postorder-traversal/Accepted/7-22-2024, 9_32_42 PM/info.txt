{"id":1329688746,"question_id":106,"lang":"cpp","lang_name":"C++","time":"6 days, 12 hours","timestamp":1721664162,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1329688746/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"26.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findPos(vector<int>& inorder, int element, int n){\n        for(int i =0; i<n;i++){\n            if(inorder[i]==element)return i;\n        }\n        return -1;\n    }\n    TreeNode* solve(vector<int>& inorder, vector<int>& postorder,int &index, int start, int end, int n){\n        if(index<0|| start>end)return NULL;\n\n        int element = postorder[index--];\n        \n        TreeNode* root = new TreeNode(element);\n        int pos = findPos(inorder,element,n);\n        \n        root-> right = solve(inorder,postorder,index,pos+1,end,n);\n        root-> left = solve(inorder,postorder,index,start,pos-1,n);\n\n        return root;\n    }\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        int n = postorder.size();\n        int index=n-1;\n        TreeNode* ans = solve(inorder,postorder,index,0,n-1,n);\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}