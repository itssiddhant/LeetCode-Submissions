{"id":1335044651,"question_id":23,"lang":"cpp","lang_name":"C++","time":"1 day, 16 hours","timestamp":1722080808,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1335044651/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"18.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n #include<queue>\n\n class compare{\n    public:\n        bool operator()(ListNode*a, ListNode*b){\n            return a->val > b->val;\n        }\n };\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        priority_queue<ListNode*, vector<ListNode*> , compare> minHeap;\n        int n = lists.size();\n\n        for( int i=0; i<n; i++){\n            if(lists[i]){\n                minHeap.push(lists[i]);\n            }\n        }\n        ListNode* head = NULL;\n        ListNode* tail =NULL;\n\n        while(minHeap.size()>0){\n           ListNode* top = minHeap.top();\n            minHeap.pop();\n            if(top->next){\n                minHeap.push(top->next);\n            }\n\n            if(head == NULL){\n                head = top;\n                tail=top;\n            }\n            else{\n                tail->next = top;\n                tail = top;\n            }\n        }\n        return head;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}