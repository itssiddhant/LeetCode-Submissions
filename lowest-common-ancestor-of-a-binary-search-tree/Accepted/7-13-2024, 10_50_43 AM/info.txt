{"id":1319308920,"question_id":235,"lang":"cpp","lang_name":"C++","time":"2 weeks, 1 day","timestamp":1720848043,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1319308920/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"22.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root==NULL)return NULL;\n\n        if(root->val == p->val|| root->val ==q->val) return root;\n\n        TreeNode* leftAns = lowestCommonAncestor(root->left,p,q);\n        TreeNode* rightAns = lowestCommonAncestor(root->right,p,q);\n\n        if(leftAns!=NULL && rightAns!=NULL) return root;\n        else if(leftAns!=NULL && rightAns==NULL) return leftAns;\n        else if(leftAns==NULL && rightAns!=NULL) return rightAns;\n        else return NULL;\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}