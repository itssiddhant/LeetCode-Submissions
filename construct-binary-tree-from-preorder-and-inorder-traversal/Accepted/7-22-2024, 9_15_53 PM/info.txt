{"id":1329670419,"question_id":105,"lang":"cpp","lang_name":"C++","time":"6 days, 12 hours","timestamp":1721663153,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1329670419/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"26.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findPos(vector<int>& inorder,int start, int end, int element, int n){\n        for(int i =start; i<=end;i++){\n            if(inorder[i]==element)return i;\n        }\n        return -1;\n    }\n    TreeNode* solve(vector<int>& preorder, vector<int>& inorder,int &index, int start, int end, int n){\n        if(index>=n|| start>end)return NULL;\n\n        int element = preorder[index++];\n        \n        TreeNode* root = new TreeNode(element);\n        int pos = findPos(inorder,start,end,element,n);\n        \n        root-> left = solve(preorder,inorder,index,start,pos-1,n);\n        root-> right = solve(preorder,inorder,index,pos+1,end,n);\n\n        return root;\n    }\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        int index=0;\n        int n = preorder.size();\n        TreeNode* ans = solve(preorder,inorder,index,0,n-1,n);\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}