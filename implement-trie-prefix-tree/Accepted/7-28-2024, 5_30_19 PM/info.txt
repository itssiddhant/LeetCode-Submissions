{"id":1336193124,"question_id":208,"lang":"cpp","lang_name":"C++","time":"16 hours, 32 minutes","timestamp":1722168019,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/1336193124/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"140.4 MB","code":"class TrieNode{\n    public:\n    char data;\n    TrieNode* children[26];\n    bool isTerminal;\n    TrieNode(char ch){\n        for(int i =0; i<26;i++){\n            children[i]=NULL;\n        }\n        isTerminal = false;\n    }\n};\nclass Trie {\n    TrieNode* root;\npublic:\n\n    Trie() {\n        root= new TrieNode('\\0');\n    }\n    void insertUtil(TrieNode* root, string word){\n        if(word.length()==0){\n            root->isTerminal = true;\n            return;\n        }\n        int index = word[0] - 'a';\n        TrieNode* child;\n        if(root->children[index]!=NULL){\n            child = root->children[index];\n        }\n        else{\n            child = new TrieNode(word[0]);\n            root->children[index] = child;\n        }\n        insertUtil(child,word.substr(1));\n    }\n    void insert(string word) {\n        insertUtil(root,word);\n    }\n    bool searchUtil(TrieNode* root, string word){\n         if(word.length()==0){\n            return root->isTerminal;\n        }\n        int index = word[0] - 'a';\n        TrieNode* child;\n        if(root->children[index]!=NULL){\n            child = root->children[index];\n        }\n        else{\n            return false;\n        }\n        return searchUtil(child,word.substr(1));\n    }\n    bool search(string word) {\n        return searchUtil(root,word);\n    }\n    bool prefixUtil(TrieNode* root, string word){\n        if(word.length()==0){\n            return true;\n        }\n        int index = word[0] - 'a';\n        TrieNode* child;\n        if(root->children[index]!=NULL){\n            child = root->children[index];\n        }\n        else{\n            return false;\n        }\n    return prefixUtil(child,word.substr(1));\n    }\n    bool startsWith(string prefix) {\n        return prefixUtil(root,prefix);\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}