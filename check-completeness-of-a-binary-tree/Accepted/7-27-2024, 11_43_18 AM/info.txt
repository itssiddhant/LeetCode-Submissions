{"id":1334778027,"question_id":998,"lang":"cpp","lang_name":"C++","time":"1 day, 22 hours","timestamp":1722060798,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1334778027/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"12.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCBT(TreeNode* root, int i, int nodeCount) {\n        if (root == NULL)\n            return true;\n        if (i >= nodeCount)\n            return false;\n\n        else {\n            bool left = isCBT(root->left, 2 * i + 1, nodeCount);\n            bool right = isCBT(root->right, 2 * i + 2, nodeCount);\n            return left && right;\n        }\n    }\n    int countNodes(TreeNode* root){\n        if(root==NULL)return 0;\n\n        int ans = 1 + countNodes(root->left) + countNodes(root->right);\n        return ans;\n    }\n    bool isCompleteTree(TreeNode* root) {\n        int index = 0;\n        int count = countNodes(root);\n\n        return (isCBT(root, index, count));\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree","has_notes":false,"flag_type":1}