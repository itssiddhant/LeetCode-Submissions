{"id":1208417530,"question_id":968,"lang":"c","lang_name":"C","time":"4 months, 1 week","timestamp":1710871332,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1208417530/","is_pending":"Not Pending","title":"Beautiful Array","memory":"N/A","code":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* BeautifulArray(int n, int* returnSize) {\n    if (n == 1) {\n        *returnSize = 1;\n        int* beautiful = (int*)malloc(sizeof(int));\n        beautiful[0] = 1;\n        return beautiful;\n    }\n    \n    int* odd = BeautifulArray((n + 1) / 2, returnSize);\n    int oddSize = *returnSize;\n    int* even = BeautifulArray(n / 2, returnSize);\n    int evenSize = *returnSize;\n\n    *returnSize = oddSize + evenSize;\n    int* beautiful = (int*)malloc((*returnSize) * sizeof(int));\n    for (int i = 0; i < oddSize; i++) {\n        beautiful[i] = 2 * odd[i] - 1;\n    }\n    for (int i = 0; i < evenSize; i++) {\n        beautiful[i + oddSize] = 2 * even[i];\n    }\n    free(odd);\n    free(even);\n    return beautiful;\n}\nint* beautifulArray(int n, int* returnSize) {\n    return generateBeautifulArray(n, returnSize);\n}","compare_result":null,"title_slug":"beautiful-array","has_notes":false,"flag_type":1}