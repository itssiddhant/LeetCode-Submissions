{"id":1330418484,"question_id":2461,"lang":"cpp","lang_name":"C++","time":"5 days, 20 hours","timestamp":1721722170,"status":10,"status_display":"Accepted","runtime":"452 ms","url":"/submissions/detail/1330418484/","is_pending":"Not Pending","title":"Amount of Time for Binary Tree to Be Infected","memory":"150.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* createMap(TreeNode* root, int target ,map<TreeNode*,TreeNode*> &nodeToParent){\n        TreeNode* res = NULL;\n\n        queue<TreeNode*> q;\n        q.push(root);\n\n        nodeToParent[root]=NULL;\n\n        while(!q.empty()){\n            TreeNode* front = q.front();\n            q.pop();\n\n            if(front->val ==target)res =front;\n            if(front->left){\n                nodeToParent[front->left]= front;\n                q.push(front->left);\n            }\n            if(front->right){\n                nodeToParent[front->right]= front;\n                q.push(front->right);\n            }\n        }\n        return res;\n    }\n    \n    int burnTree(TreeNode*root, map<TreeNode*,TreeNode*> &nodeToParent){\n\n        map<TreeNode*,bool> visited;\n        queue<TreeNode*>q;\n        visited[root]=true;\n        q.push(root);\n\n        int ans =0;\n        while(!q.empty()){\n            bool flag = 0;\n            int size = q.size();\n\n            for(int i =0; i<size; i++){\n                TreeNode* front = q.front();\n                q.pop();\n\n                if(front->left && !visited[front->left]){\n                    flag =1;\n                    q.push(front->left);\n                    visited[front->left]=1;\n                }\n                if(front->right && !visited[front->right]){\n                    flag =1;\n                    q.push(front->right);\n                    visited[front->right]=1;\n                }\n                if(nodeToParent[front] && !visited[nodeToParent[front]]){\n                    flag =1;\n                    q.push(nodeToParent[front]);\n                    visited[nodeToParent[front]]=1;\n                }\n            }\n            if(flag==1)ans++;\n        }\n        return ans;\n\n    }\n    int amountOfTime(TreeNode* root, int start) {\n        map<TreeNode*,TreeNode*> node;\n        TreeNode* temp = createMap(root,start,node);\n        if(!temp)return 0;\n        return burnTree(temp,node);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"amount-of-time-for-binary-tree-to-be-infected","has_notes":false,"flag_type":1}