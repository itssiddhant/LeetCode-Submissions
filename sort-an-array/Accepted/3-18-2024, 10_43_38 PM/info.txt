{"id":1207432352,"question_id":948,"lang":"c","lang_name":"C","time":"4 months, 1 week","timestamp":1710782018,"status":10,"status_display":"Accepted","runtime":"825 ms","url":"/submissions/detail/1207432352/","is_pending":"Not Pending","title":"Sort an Array","memory":"167 MB","code":"void Merge(int A[],int p,int q,int r){\n    int i,j,k,n1,n2;\n    n1= q-p+1;\n    n2=r-q;\n    int *L = (int*)malloc((n1 + 1) * sizeof(int));\n    int *R = (int*)malloc((n2 + 1) * sizeof(int));\n    for (i=0; i<n1;i++){\n        L[i]=A[p+i];\n    }\n    for(j=0;j<n2;j++){\n        R[j]=A[q+1+j];\n    }\n    L[n1]=INT_MAX;\n    R[n2]=INT_MAX;\n    i=0;j=0;\n    for(k=p;k<=r;k++){\n        if (L[i]<=R[j]){\n            A[k]=L[i];\n            i=i+1;\n        }\n        else{\n            A[k]=R[j];\n            j=j+1;\n        }\n    }\n    free(L);\n    free(R);\n}\nvoid MergeSort(int A[],int p,int r){\n    if(p<r){\n        int q= (p+r)/2;\n        MergeSort(A,p,q);\n        MergeSort(A,q+1,r);\n        Merge(A,p,q,r);\n    }\n}\nint* sortArray(int* nums, int numsSize, int* returnSize) {\n    *returnSize = numsSize;\n    MergeSort(nums, 0, numsSize - 1);\n    return nums;\n}","compare_result":"111111111111111111111","title_slug":"sort-an-array","has_notes":false,"flag_type":1}