{"id":1335229946,"question_id":632,"lang":"cpp","lang_name":"C++","time":"1 day, 12 hours","timestamp":1722094494,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1335229946/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"22.4 MB","code":"#include <limits.h>\n#include<queue>\n#include <bits/stdc++.h>\nclass Node{\n    public:\n    int data;\n    int row;\n    int col;\n\n    Node(int data, int row, int col){\n        this->data = data;\n        this->row = row;\n        this->col=col;\n    }\n};\nclass compare{\n    public:\n    bool operator()(Node*a, Node*b){\n        return a->data > b->data;\n    }\n};\nclass Solution {\npublic:\n    vector<int> smallestRange(vector<vector<int>>& nums) {\n        priority_queue<Node*,vector<Node*>,compare> minHeap;\n        vector<int>ans;\n        int k = nums.size();\n        int maxi = INT_MIN;\n        int mini = INT_MAX;\n        int length = 0;\n        for(int i =0; i<k;i++){\n            int element = nums[i][0];\n            mini = min(mini,element);\n            maxi = max(maxi,element);\n            minHeap.push(new Node(element, i ,0));\n        }\n\n        int start = mini, end = maxi;\n\n        while(!minHeap.empty()){\n            Node* temp = minHeap.top();\n            minHeap.pop();\n            mini = temp->data;\n            if(maxi-mini <end-start){\n                start = mini;\n                end = maxi;\n            }\n            if(temp->col +1 <nums[temp->row].size()){\n                int element = nums[temp->row][temp->col+1];\n                maxi = max(maxi,element);\n                minHeap.push(new Node(element,temp->row,temp->col+1));\n            }\n            else{\n                break;\n            }\n        }\n        ans.push_back(start);\n        ans.push_back(end);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}