{"id":1333244651,"question_id":1050,"lang":"cpp","lang_name":"C++","time":"3 days, 11 hours","timestamp":1721926458,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1333244651/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"16.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* solve(vector<int> &preorder, int mini, int maxi, int &i){\n        if(i>=preorder.size() || preorder[i]<mini || preorder[i]>maxi)return NULL;\n\n        TreeNode* root = new TreeNode(preorder[i++]);\n\n        root->left = solve(preorder, mini, root->val,i);\n        root->right = solve(preorder, root->val, maxi, i);\n\n        return root;\n    }\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        int index =0;\n        return solve(preorder,INT_MIN,INT_MAX,index);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}