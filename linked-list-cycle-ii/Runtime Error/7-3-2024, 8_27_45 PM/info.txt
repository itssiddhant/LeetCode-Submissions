{"id":1308369088,"question_id":142,"lang":"cpp","lang_name":"C++","time":"3 weeks, 4 days","timestamp":1720018665,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1308369088/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\n\npublic:\n    ListNode* hasCycle(ListNode* head){\n        struct ListNode* slow = head;\n        struct ListNode* fast = head;\n\n        while(slow!=NULL && fast != NULL){\n            fast = fast->next;\n            if(fast!=NULL){\n                fast = fast->next;\n            }\n            slow = slow->next;\n\n            if(slow==fast){\n                return slow;\n            }\n        }\n        return NULL;\n    }\n    ListNode *detectCycle(ListNode *head) {\n        if(head==NULL || head->next == NULL){\n            return NULL;\n        }\n        struct ListNode* intersection = hasCycle(head);\n        struct ListNode* slow = head;\n\n        while(slow!=intersection){\n            slow = slow->next;\n            intersection = intersection->next;\n        }\n        return slow;\n    }\n};","compare_result":"11111000000000000","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}