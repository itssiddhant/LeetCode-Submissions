{"id":1317290917,"question_id":110,"lang":"cpp","lang_name":"C++","time":"2 weeks, 3 days","timestamp":1720683228,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1317290917/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"21.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    pair<bool,int> iB(TreeNode* root){\n        if(root == NULL){\n            pair<bool,int> p = make_pair(true,0);\n            return p;\n        }\n        pair<bool,int> left = iB(root->left);\n        pair<bool,int> right = iB(root->right);\n\n        bool op1 = left.first;\n        bool op2 = right.first;\n\n        bool op3 = abs(left.second-right.second)<=1;\n\n        pair<bool,int> ans;\n\n        ans.second = max(left.second,right.second)+1;\n\n        if(op1&& op2&& op3){\n            ans.first = true;\n        }\n        else{\n            ans.first = false;\n        }\n        return ans;\n    }\n    bool isBalanced(TreeNode* root) {\n        return iB(root).first;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}